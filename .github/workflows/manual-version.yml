name: Manual Version Bump

# Allow manual triggering from GitHub UI
on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor  
        - major
      skip_docker:
        description: 'Skip Docker build after version bump'
        required: false
        default: false
        type: boolean

jobs:
  manual-version:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Needed to push commits and tags
      actions: write   # Needed to trigger other workflows
    
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies first
          pip install python-dotenv
          # Install compatible versions for both tools
          pip install "httpx>=0.28.1"  # For bump-my-version
          pip install bump-my-version
          
          # Validate installation and project imports
          echo "✅ Validating bump-my-version installation..."
          bump-my-version --version || { echo "❌ bump-my-version installation failed"; exit 1; }
          
          echo "✅ Validating project imports..."
          python -c "from utils.version import VERSION; print(f'Current version: {VERSION}')" || { echo "❌ utils.version import failed"; exit 1; }
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Ensure we're on main branch
          CURRENT_BRANCH=$(git branch --show-current)
          if [[ "$CURRENT_BRANCH" != "main" ]]; then
            echo "⚠️ Not on main branch, switching..."
            git checkout main
            git pull origin main
          else
            echo "✅ Already on main branch"
          fi
          
          # Validate git configuration
          echo "✅ Git user: $(git config user.name)"
          echo "✅ Git email: $(git config user.email)"
          echo "✅ Current branch: $(git branch --show-current)"
          echo "✅ Latest commit: $(git log --oneline -1)"
      
      - name: Display manual trigger info
        run: |
          echo "🎯 Manual version bump triggered!"
          echo "📋 Requested version type: ${{ github.event.inputs.version_type }}"
          echo "🐳 Skip Docker build: ${{ github.event.inputs.skip_docker }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          
      - name: Validate current version and bump
        run: |
          # Get and validate current version
          CURRENT_VERSION=$(python -c "from utils.version import VERSION; print(VERSION)")
          echo "📋 Current version: $CURRENT_VERSION"
          
          # Validate version format (semantic versioning)
          if [[ ! $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $CURRENT_VERSION"
            echo "Expected format: X.Y.Z (e.g., 4.1.3)"
            exit 1
          fi
          
          echo "✅ Version format is valid"
          
          # Calculate next version for conflict checking
          case "${{ github.event.inputs.version_type }}" in
            "major")
              NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}') ;;
            "minor") 
              NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}') ;;
            "patch")
              NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}') ;;
          esac
          
          echo "🎯 Will bump to: $NEXT_VERSION"
          
          # Check if target version tag already exists (prevent conflicts)
          if git tag | grep -q "^v$NEXT_VERSION$"; then
            echo "⚠️ Tag v$NEXT_VERSION already exists, cleaning up..."
            git tag -d "v$NEXT_VERSION" || true
            git push origin ":refs/tags/v$NEXT_VERSION" || true
          fi
          
          # Perform the version bump with error checking
          echo "🚀 Bumping ${{ github.event.inputs.version_type }} version..."
          
          if ! bump-my-version bump ${{ github.event.inputs.version_type }} \
            --config-file pyproject.toml \
            --verbose; then
            echo "❌ bump-my-version failed! Checking state..."
            echo "Git status:" 
            git status
            echo "Recent commits:"
            git log --oneline -3
            exit 1
          fi
          
          # Validate the new version
          NEW_VERSION=$(python -c "from utils.version import VERSION; print(VERSION)")
          echo "✅ New version: $NEW_VERSION"
          
          # Ensure version actually changed
          if [[ "$CURRENT_VERSION" == "$NEW_VERSION" ]]; then
            echo "❌ Version didn't change! Something went wrong."
            exit 1
          fi
          
          echo "✅ Version successfully bumped: $CURRENT_VERSION → $NEW_VERSION"
          
          # Export for next step
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
      
      - name: Push changes with validation
        run: |
          # Validate that we have a version bump commit
          if ! git log --oneline -1 | grep -q "Bump version:"; then
            echo "❌ No version bump commit found!"
            echo "Recent commits:"
            git log --oneline -3
            exit 1
          fi
          
          echo "✅ Version bump commit verified: $(git log --oneline -1)"
          
          # Push the commit with error checking
          echo "📤 Pushing version commit to main..."
          if ! git push origin main; then
            echo "❌ Failed to push commit to main branch!"
            exit 1
          fi
          echo "✅ Commit pushed successfully"
          
          # Push the tags with error checking  
          echo "🏷️ Pushing version tag..."
          if ! git push origin --tags; then
            echo "❌ Failed to push tags!"
            exit 1
          fi
          echo "✅ Tags pushed successfully"
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            🎉 **Manual Release v${{ env.NEW_VERSION }}**
            
            **Changes:**
            - Version bumped from `${{ env.CURRENT_VERSION }}` → `${{ env.NEW_VERSION }}`
            - Type: `${{ github.event.inputs.version_type }}`
            - Manually triggered by: @${{ github.actor }}
            
            **Docker Images:**
            - `${{ secrets.DOCKERHUB_USERNAME }}/overseerr-telegram-bot:${{ env.NEW_VERSION }}`
            - `${{ secrets.DOCKERHUB_USERNAME }}/overseerr-telegram-bot:latest`
            
            ${{ github.event.inputs.skip_docker == 'true' && '⚠️ **Docker build was skipped for this release**' || '🐳 **Docker images will be built automatically**' }}
          draft: false
          prerelease: false
      
      - name: Trigger Docker Build (if not skipped)
        if: github.event.inputs.skip_docker != 'true'
        run: |
          echo "🐳 Triggering Docker build workflow..."
          echo "Tag v${{ env.NEW_VERSION }} will trigger docker-build.yml automatically"
          
      - name: Summary
        run: |
          echo "## 🎉 Manual Release: v${{ env.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY  
          echo "| **Version** | \`${{ env.NEW_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Previous** | \`${{ env.CURRENT_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Type** | \`${{ github.event.inputs.version_type }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered by** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Docker Build** | ${{ github.event.inputs.skip_docker == 'true' && 'Skipped' || 'Will trigger automatically' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.skip_docker }}" != "true" ]]; then
            echo "🐳 **Docker images will be available soon:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/overseerr-telegram-bot:${{ env.NEW_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/overseerr-telegram-bot:latest\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Docker build was skipped** - images not updated" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Manual version bump completed successfully!**" >> $GITHUB_STEP_SUMMARY
