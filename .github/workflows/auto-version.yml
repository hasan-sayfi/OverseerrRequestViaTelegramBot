name: Auto Version and Release

# Trigger when PR is merged to main
on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  auto-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Needed to push commits and tags
      pull-requests: read  # Needed to read PR labels
    
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          # Ensure we can write to the repository
          persist-credentials: true
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies first
          pip install python-dotenv
          # Install compatible versions for both tools
          pip install "httpx>=0.28.1"  # For bump-my-version
          pip install bump-my-version
          
          # Validate installation and project imports
          echo "✅ Validating bump-my-version installation..."
          bump-my-version --version || { echo "❌ bump-my-version installation failed"; exit 1; }
          
          echo "✅ Validating project imports..."
          python -c "from utils.version import VERSION; print(f'Current version: {VERSION}')" || { echo "❌ utils.version import failed"; exit 1; }
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Verify we're already on main (should be after PR merge)
          CURRENT_BRANCH=$(git branch --show-current)
          if [[ "$CURRENT_BRANCH" != "main" ]]; then
            echo "⚠️ Not on main branch, switching..."
            git checkout main
            git pull origin main
          else
            echo "✅ Already on main branch"
          fi
          
          # Validate git configuration
          echo "✅ Git user: $(git config user.name)"
          echo "✅ Git email: $(git config user.email)"
          echo "✅ Current branch: $(git branch --show-current)"
          echo "✅ Latest commit: $(git log --oneline -1)"
      
      # Determine version bump type from PR labels or commit messages
      - name: Determine version bump type
        id: version-type
        run: |
          # Check PR labels for version type
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "✅ Detected: MAJOR version bump"
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "✅ Detected: MINOR version bump"
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "✅ Detected: PATCH version bump (default)"
          fi
      
      - name: Validate current version and bump
        run: |
          # Get and validate current version
          CURRENT_VERSION=$(python -c "from utils.version import VERSION; print(VERSION)")
          echo "📋 Current version: $CURRENT_VERSION"
          
          # Validate version format (semantic versioning)
          if [[ ! $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $CURRENT_VERSION"
            echo "Expected format: X.Y.Z (e.g., 4.1.3)"
            exit 1
          fi
          
          echo "✅ Version format is valid"
          
          # Perform the version bump with error checking
          echo "🚀 Bumping ${{ steps.version-type.outputs.bump_type }} version..."
          
          # Check if target version tag already exists (prevent conflicts)
          case "${{ steps.version-type.outputs.bump_type }}" in
            "major")
              NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}') ;;
            "minor") 
              NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}') ;;
            "patch")
              NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}') ;;
          esac
          
          if git tag | grep -q "^v$NEXT_VERSION$"; then
            echo "⚠️ Tag v$NEXT_VERSION already exists, cleaning up..."
            git tag -d "v$NEXT_VERSION" || true
            git push origin ":refs/tags/v$NEXT_VERSION" || true
          fi
          
          # Use bump-my-version with explicit configuration and error handling
          if ! bump-my-version bump ${{ steps.version-type.outputs.bump_type }} \
            --config-file pyproject.toml \
            --verbose; then
            echo "❌ bump-my-version failed! Checking state..."
            echo "Git status:" 
            git status
            echo "Recent commits:"
            git log --oneline -3
            exit 1
          fi
          
          # Validate the new version
          NEW_VERSION=$(python -c "from utils.version import VERSION; print(VERSION)")
          echo "✅ New version: $NEW_VERSION"
          
          # Ensure version actually changed
          if [[ "$CURRENT_VERSION" == "$NEW_VERSION" ]]; then
            echo "❌ Version didn't change! Something went wrong."
            exit 1
          fi
          
          echo "✅ Version successfully bumped: $CURRENT_VERSION → $NEW_VERSION"
          
          # Export for next step
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
      
      - name: Push changes with validation
        run: |
          # Get the new version for logging
          NEW_VERSION=$(python -c "from utils.version import VERSION; print(VERSION)")
          
          # Validate that we have a version bump commit (bump-my-version already committed)
          if ! git log --oneline -1 | grep -q "Bump version:"; then
            echo "❌ No version bump commit found!"
            echo "Recent commits:"
            git log --oneline -3
            exit 1
          fi
          
          echo "✅ Version bump commit verified: $(git log --oneline -1)"
          
          # Push the commit with error checking
          echo "📤 Pushing version commit to main..."
          if ! git push origin main; then
            echo "❌ Failed to push commit to main branch!"
            exit 1
          fi
          echo "✅ Commit pushed successfully"
          
          # Push the tags with error checking  
          echo "🏷️ Pushing version tag..."
          if ! git push origin --tags; then
            echo "❌ Failed to push tags!"
            exit 1
          fi
          echo "✅ Tags pushed successfully"
          
          echo "🎉 Version ${{ env.NEW_VERSION }} released successfully!"
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            🎉 **Auto Release v${{ env.NEW_VERSION }}**
            
            **Changes:**
            - Version bumped automatically via PR merge
            - Type: `${{ steps.version-type.outputs.bump_type }}`
            - Triggered by: PR #${{ github.event.number }} by @${{ github.event.pull_request.user.login }}
            
            **Pull Request Details:**
            - **Title:** ${{ github.event.pull_request.title }}
            - **Branch:** `${{ github.event.pull_request.head.ref }}` → `main`
            - **Commits:** ${{ github.event.pull_request.commits }} commit(s)
            
            **Docker Images:**
            - `${{ secrets.DOCKERHUB_USERNAME }}/overseerr-telegram-bot:${{ env.NEW_VERSION }}`
            - `${{ secrets.DOCKERHUB_USERNAME }}/overseerr-telegram-bot:latest`
            
            🐳 **Docker images will be built automatically**
            
            ---
            **📋 PR Description:**
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false
      
      - name: Summary
        run: |
          echo "## 🎉 Auto-Release: v${{ env.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY  
          echo "| **Version** | \`$NEW_VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Type** | \`${{ steps.version-type.outputs.bump_type }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered by** | PR #${{ github.event.number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Docker Build** | Will trigger automatically |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🐳 **Docker images will be available soon:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/overseerr-telegram-bot:$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/overseerr-telegram-bot:latest\`" >> $GITHUB_STEP_SUMMARY
